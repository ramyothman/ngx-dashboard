/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import { Component, Input, Output, ElementRef, ViewChild, Renderer, EventEmitter, ViewContainerRef } from '@angular/core';
import { GridStackItem } from './../models/grid-stack-item.model';
export class GridStackItemComponent {
    /**
     * @param {?} el
     * @param {?} renderer
     */
    constructor(el, renderer) {
        this.el = el;
        this.renderer = renderer;
        this.GridConfigurationChanged = new EventEmitter();
        this.contentComponentRef = null;
        this.jGridRef = null;
        this.jWidgetRef = null;
        this.jWidgetRef = el.nativeElement;
    }
    /**
     * @return {?}
     */
    get nativeElement() {
        return this.el.nativeElement;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.RenderWidget(null);
    }
    /**
     * @param {?} item
     * @return {?}
     */
    UpdateWidget(item) {
    }
    /**
     * @param {?} item
     * @return {?}
     */
    RenderWidget(item) {
        const /** @type {?} */ renderer = this.renderer;
        if (item != null) {
            this.option = item;
        }
        this.renderer.setElementAttribute(this.nativeElement, 'style', 'margin-left:' + this.option.marginWidth + ';');
        this.renderer.setElementAttribute(this.nativeElement, 'data-gs-x', String(this.option.x));
        this.renderer.setElementAttribute(this.nativeElement, 'data-gs-y', String(this.option.y));
        this.renderer.setElementAttribute(this.nativeElement, 'data-gs-width', String(this.option.width));
        this.renderer.setElementAttribute(this.nativeElement, 'data-gs-height', String(this.option.height));
        if (this.option.minWidth) {
            renderer.setElementAttribute(this.nativeElement, 'data-gs-min-width', String(this.option.minWidth));
        }
        if (this.option.noResize != null && this.option.noResize === true) {
            renderer.setElementAttribute(this.nativeElement, 'data-gs-no-resize', 'yes');
        }
    }
    /**
     * @param {?} x
     * @param {?} y
     * @param {?} width
     * @param {?} height
     * @return {?}
     */
    update(x, y, width, height) {
        // console.log('here');
        if (x === this.option.x && y === this.option.y && width === this.option.width && height === this.option.height) {
            return;
        }
        if (this.option != null) {
            this.option.x = x;
            this.option.y = y;
            this.option.width = width;
            this.option.height = height;
            const /** @type {?} */ optionNew = GridStackItem.Clone(this.option);
            this.GridConfigurationChanged.emit(optionNew);
        }
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        if (this.contentComponentRef !== null) {
            this.contentComponentRef.destroy();
        }
    }
}
GridStackItemComponent.decorators = [
    { type: Component, args: [{
                selector: 'ngx-grid-stack-item',
                template: `<div class="grid-stack-item-content">
  <div #contentPlaceholder *ngIf="contentTemplate"></div>
  <ng-content *ngIf="!contentTemplate"></ng-content>
</div>
`,
                styles: [``]
            },] },
];
/** @nocollapse */
GridStackItemComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: Renderer }
];
GridStackItemComponent.propDecorators = {
    contentPlaceholder: [{ type: ViewChild, args: ['contentPlaceholder', { read: ViewContainerRef },] }],
    contentTemplate: [{ type: Input }],
    option: [{ type: Input }],
    GridConfigurationChanged: [{ type: Output }]
};
function GridStackItemComponent_tsickle_Closure_declarations() {
    /** @type {?} */
    GridStackItemComponent.prototype.contentPlaceholder;
    /** @type {?} */
    GridStackItemComponent.prototype.contentTemplate;
    /** @type {?} */
    GridStackItemComponent.prototype.option;
    /** @type {?} */
    GridStackItemComponent.prototype.GridConfigurationChanged;
    /** @type {?} */
    GridStackItemComponent.prototype.contentComponentRef;
    /** @type {?} */
    GridStackItemComponent.prototype.jGridRef;
    /** @type {?} */
    GridStackItemComponent.prototype.jWidgetRef;
    /** @type {?} */
    GridStackItemComponent.prototype.el;
    /** @type {?} */
    GridStackItemComponent.prototype.renderer;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3JpZC1zdGFjay1pdGVtLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL25neC1ncmlkLXN0YWNrLyIsInNvdXJjZXMiOlsibGliL2dyaWQtc3RhY2staXRlbS9ncmlkLXN0YWNrLWl0ZW0uY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQ0wsU0FBUyxFQUNULEtBQUssRUFDTCxNQUFNLEVBR04sVUFBVSxFQUNWLFNBQVMsRUFDVCxRQUFRLEVBQ1IsWUFBWSxFQUdaLGdCQUFnQixFQUNqQixNQUFNLGVBQWUsQ0FBQztBQUN2QixPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0sbUNBQW1DLENBQUM7QUFZbEUsTUFBTTs7Ozs7SUFXSixZQUFvQixFQUFjLEVBQVUsUUFBa0I7UUFBMUMsT0FBRSxHQUFGLEVBQUUsQ0FBWTtRQUFVLGFBQVEsR0FBUixRQUFRLENBQVU7d0NBTnpCLElBQUksWUFBWSxFQUFpQjttQ0FFN0IsSUFBSTt3QkFDN0IsSUFBSTswQkFDSyxJQUFJO1FBR3pCLElBQUksQ0FBQyxVQUFVLEdBQUcsRUFBRSxDQUFDLGFBQWEsQ0FBQztLQUN0Qzs7OztJQUNELElBQUksYUFBYTtRQUNiLE1BQU0sQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLGFBQWEsQ0FBQztLQUNoQzs7OztJQUNELFFBQVE7UUFDSixJQUFJLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxDQUFDO0tBQzNCOzs7OztJQUVELFlBQVksQ0FBQyxJQUFtQjtLQUUvQjs7Ozs7SUFDRCxZQUFZLENBQUMsSUFBbUI7UUFDNUIsdUJBQU0sUUFBUSxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUM7UUFDL0IsRUFBRSxDQUFDLENBQUMsSUFBSSxJQUFJLElBQUksQ0FBQyxDQUFDLENBQUM7WUFDakIsSUFBSSxDQUFDLE1BQU0sR0FBRyxJQUFJLENBQUM7U0FDcEI7UUFFRCxJQUFJLENBQUMsUUFBUSxDQUFDLG1CQUFtQixDQUFDLElBQUksQ0FB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QUMsRUFBRSxDQUFDO2FBQ2I7Ozs7WUFuQkMsVUFBVTtZQUVWLFFBQVE7OztpQ0FvQlAsU0FBUyxTQUFDLG9CQUFvQixFQUFFLEVBQUUsSUFBSSxFQUFFLGdCQUFnQixFQUFFOzhCQUMxRCxLQUFLO3FCQUNMLEtBQUs7dUNBQ0wsTUFBTSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG4gIENvbXBvbmVudCxcbiAgSW5wdXQsXG4gIE91dHB1dCxcbiAgT25Jbml0LFxuICBDb21wb25lbnRSZWYsXG4gIEVsZW1lbnRSZWYsXG4gIFZpZXdDaGlsZCxcbiAgUmVuZGVyZXIsXG4gIEV2ZW50RW1pdHRlcixcbiAgT25EZXN0cm95LFxuICBBZnRlclZpZXdJbml0LFxuICBWaWV3Q29udGFpbmVyUmVmXG59IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgR3JpZFN0YWNrSXRlbSB9IGZyb20gJy4vLi4vbW9kZWxzL2dyaWQtc3RhY2staXRlbS5tb2RlbCc7XG5kZWNsYXJlIHZhciBqUXVlcnk6IGFueTtcbmRlY2xhcmUgdmFyIF86IGFueTtcbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ25neC1ncmlkLXN0YWNrLWl0ZW0nLFxuICB0ZW1wbGF0ZTogYDxkaXYgY2xhc3M9XCJncmlkLXN0YWNrLWl0ZW0tY29udGVudFwiPlxuICA8ZGl2ICNjb250ZW50UGxhY2Vob2xkZXIgKm5nSWY9XCJjb250ZW50VGVtcGxhdGVcIj48L2Rpdj5cbiAgPG5nLWNvbnRlbnQgKm5nSWY9XCIhY29udGVudFRlbXBsYXRlXCI+PC9uZy1jb250ZW50PlxuPC9kaXY+XG5gLFxuICBzdHlsZXM6IFtgYF1cbn0pXG5leHBvcnQgY2xhc3MgR3JpZFN0YWNrSXRlbUNvbXBvbmVudCBpbXBsZW1lbnRzIE9uSW5pdCwgT25EZXN0cm95LCBBZnRlclZpZXdJbml0IHtcblxuICBAVmlld0NoaWxkKCdjb250ZW50UGxhY2Vob2xkZXInLCB7IHJlYWQ6IFZpZXdDb250YWluZXJSZWYgfSkgY29udGVudFBsYWNlaG9sZGVyOiBWaWV3Q29udGFpbmVyUmVmO1xuICBASW5wdXQoKSBjb250ZW50VGVtcGxhdGU6IHN0cmluZztcbiAgQElucHV0KCkgb3B0aW9uOiBHcmlkU3RhY2tJdGVtO1xuICBAT3V0cHV0KCkgR3JpZENvbmZpZ3VyYXRpb25DaGFuZ2VkID0gbmV3IEV2ZW50RW1pdHRlcjxHcmlkU3RhY2tJdGVtPigpO1xuXG4gIGNvbnRlbnRDb21wb25lbnRSZWY6IENvbXBvbmVudFJlZjxhbnk+ID0gbnVsbDtcbiAgakdyaWRSZWY6IGFueSA9IG51bGw7XG4gIHB1YmxpYyBqV2lkZ2V0UmVmOiBhbnkgPSBudWxsO1xuXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgZWw6IEVsZW1lbnRSZWYsIHByaXZhdGUgcmVuZGVyZXI6IFJlbmRlcmVyKSB7XG4gICAgICB0aGlzLmpXaWRnZXRSZWYgPSBlbC5uYXRpdmVFbGVtZW50O1xuICB9XG4gIGdldCBuYXRpdmVFbGVtZW50KCk6IEhUTUxFbGVtZW50IHtcbiAgICAgIHJldHVybiB0aGlzLmVsLm5hdGl2ZUVsZW1lbnQ7XG4gIH1cbiAgbmdPbkluaXQoKSB7XG4gICAgICB0aGlzLlJlbmRlcldpZGdldChudWxsKTtcbiAgfVxuXG4gIFVwZGF0ZVdpZGdldChpdGVtOiBHcmlkU3RhY2tJdGVtKSB7XG5cbiAgfVxuICBSZW5kZXJXaWRnZXQoaXRlbTogR3JpZFN0YWNrSXRlbSkge1xuICAgICAgY29uc3QgcmVuZGVyZXIgPSB0aGlzLnJlbmRlcmVyO1xuICAgICAgaWYgKGl0ZW0gIT0gbnVsbCkge1xuICAgICAgICB0aGlzLm9wdGlvbiA9IGl0ZW07XG4gICAgICB9XG5cbiAgICAgIHRoaXMucmVuZGVyZXIuc2V0RWxlbWVudEF0dHJpYnV0ZSh0aGlzLm5hdGl2ZUVsZW1lbnQsICdzdHlsZScsICdtYXJnaW4tbGVmdDonICsgdGhpcy5vcHRpb24ubWFyZ2luV2lkdGggKyAnOycpO1xuICAgICAgdGhpcy5yZW5kZXJlci5zZXRFbGVtZW50QXR0cmlidXRlKHRoaXMubmF0aXZlRWxlbWVudCwgJ2RhdGEtZ3MteCcsIFN0cmluZyh0aGlzLm9wdGlvbi54KSk7XG4gICAgICB0aGlzLnJlbmRlcmVyLnNldEVsZW1lbnRBdHRyaWJ1dGUodGhpcy5uYXRpdmVFbGVtZW50LCAnZGF0YS1ncy15JywgU3RyaW5nKHRoaXMub3B0aW9uLnkpKTtcbiAgICAgIHRoaXMucmVuZGVyZXIuc2V0RWxlbWVudEF0dHJpYnV0ZSh0aGlzLm5hdGl2ZUVsZW1lbnQsICdkYXRhLWdzLXdpZHRoJywgU3RyaW5nKHRoaXMub3B0aW9uLndpZHRoKSk7XG4gICAgICB0aGlzLnJlbmRlcmVyLnNldEVsZW1lbnRBdHRyaWJ1dGUodGhpcy5uYXRpdmVFbGVtZW50LCAnZGF0YS1ncy1oZWlnaHQnLCBTdHJpbmcodGhpcy5vcHRpb24uaGVpZ2h0KSk7XG4gICAgICBpZiAodGhpcy5vcHRpb24ubWluV2lkdGgpIHtcbiAgICAgICAgICByZW5kZXJlci5zZXRFbGVtZW50QXR0cmlidXRlKHRoaXMubmF0aXZlRWxlbWVudCwgJ2RhdGEtZ3MtbWluLXdpZHRoJywgU3RyaW5nKHRoaXMub3B0aW9uLm1pbldpZHRoKSk7XG4gICAgICB9XG4gICAgICBpZiAodGhpcy5vcHRpb24ubm9SZXNpemUgIT0gbnVsbCAmJiB0aGlzLm9wdGlvbi5ub1Jlc2l6ZSA9PT0gdHJ1ZSkge1xuICAgICAgICAgIHJlbmRlcmVyLnNldEVsZW1lbnRBdHRyaWJ1dGUodGhpcy5uYXRpdmVFbGVtZW50LCAnZGF0YS1ncy1uby1yZXNpemUnLCAneWVzJyk7XG4gICAgICB9XG5cbiAgfVxuXG4gIHVwZGF0ZSh4OiBudW1iZXIsIHk6IG51bWJlciwgd2lkdGg6IG51bWJlciwgaGVpZ2h0OiBudW1iZXIpOiB2b2lkIHtcbiAgICAgIC8vIGNvbnNvbGUubG9nKCdoZXJlJyk7XG4gICAgICBpZiAoeCA9PT0gdGhpcy5vcHRpb24ueCAmJiB5ID09PSB0aGlzLm9wdGlvbi55ICYmIHdpZHRoID09PSB0aGlzLm9wdGlvbi53aWR0aCAmJiBoZWlnaHQgPT09IHRoaXMub3B0aW9uLmhlaWdodCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGlmICh0aGlzLm9wdGlvbiAhPSBudWxsKSB7XG4gICAgICAgICAgdGhpcy5vcHRpb24ueCA9IHg7XG4gICAgICAgICAgdGhpcy5vcHRpb24ueSA9IHk7XG4gICAgICAgICAgdGhpcy5vcHRpb24ud2lkdGggPSB3aWR0aDtcbiAgICAgICAgICB0aGlzLm9wdGlvbi5oZWlnaHQgPSBoZWlnaHQ7XG5cbiAgICAgICAgICBjb25zdCBvcHRpb25OZXcgPSBHcmlkU3RhY2tJdGVtLkNsb25lKHRoaXMub3B0aW9uKTtcbiAgICAgICAgICB0aGlzLkdyaWRDb25maWd1cmF0aW9uQ2hhbmdlZC5lbWl0KG9wdGlvbk5ldyk7XG4gICAgICB9XG4gIH1cblxuICBuZ0FmdGVyVmlld0luaXQoKTogdm9pZCB7XG5cbiAgfVxuXG4gIG5nT25EZXN0cm95KCk6IHZvaWQge1xuICAgICAgaWYgKHRoaXMuY29udGVudENvbXBvbmVudFJlZiAhPT0gbnVsbCkge1xuICAgICAgICB0aGlzLmNvbnRlbnRDb21wb25lbnRSZWYuZGVzdHJveSgpO1xuICAgICAgfVxuICB9XG59XG4iXX0=