/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
export class GridStackOptions {
}
function GridStackOptions_tsickle_Closure_declarations() {
    /** @type {?} */
    GridStackOptions.prototype.acceptWidgets;
    /** @type {?} */
    GridStackOptions.prototype.alwaysShowResizeHandle;
    /** @type {?} */
    GridStackOptions.prototype.animate;
    /** @type {?} */
    GridStackOptions.prototype.auto;
    /** @type {?} */
    GridStackOptions.prototype.cellHeight;
    /** @type {?} */
    GridStackOptions.prototype.ddPlugin;
    /** @type {?} */
    GridStackOptions.prototype.disableDrag;
    /** @type {?} */
    GridStackOptions.prototype.disableResize;
    /** @type {?} */
    GridStackOptions.prototype.draggable;
    /** @type {?} */
    GridStackOptions.prototype.handle;
    /** @type {?} */
    GridStackOptions.prototype.handleClass;
    /** @type {?} */
    GridStackOptions.prototype.height;
    /** @type {?} */
    GridStackOptions.prototype.float;
    /** @type {?} */
    GridStackOptions.prototype.itemClass;
    /** @type {?} */
    GridStackOptions.prototype.minWidth;
    /** @type {?} */
    GridStackOptions.prototype.disableOneColumnMode;
    /** @type {?} */
    GridStackOptions.prototype.oneColumnModeClass;
    /** @type {?} */
    GridStackOptions.prototype.placeholderClass;
    /** @type {?} */
    GridStackOptions.prototype.placeholderText;
    /** @type {?} */
    GridStackOptions.prototype.resizable;
    /** @type {?} */
    GridStackOptions.prototype.removable;
    /** @type {?} */
    GridStackOptions.prototype.removeTimeout;
    /** @type {?} */
    GridStackOptions.prototype.rtl;
    /** @type {?} */
    GridStackOptions.prototype.staticGrid;
    /** @type {?} */
    GridStackOptions.prototype.verticalMargin;
    /** @type {?} */
    GridStackOptions.prototype.width;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3JpZC1zdGFjay1vcHRpb25zLm1vZGVsLmpzIiwic291cmNlUm9vdCI6Im5nOi8vbmd4LWdyaWQtc3RhY2svIiwic291cmNlcyI6WyJsaWIvbW9kZWxzL2dyaWQtc3RhY2stb3B0aW9ucy5tb2RlbC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsTUFBTTtDQTJCTCIsInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBjbGFzcyBHcmlkU3RhY2tPcHRpb25zIHtcbiAgICBhY2NlcHRXaWRnZXRzOiBib29sZWFuO1xuICAgIGFsd2F5c1Nob3dSZXNpemVIYW5kbGU6IGJvb2xlYW47XG4gICAgYW5pbWF0ZTogYm9vbGVhbjtcbiAgICBhdXRvOiBib29sZWFuO1xuICAgIGNlbGxIZWlnaHQ6IHN0cmluZzsgLy9kZWZhdWx0IGlzIDYwIGNvdWxkIGJlIGFuIGludGVnZXIgKHB4KSBhIHN0cmluZyAoZXg6ICcxMGVtJywgJzEwMHB4JywgJzEwcmVtJykgMCBvciBudWxsICdhdXRvJyAtIGhlaWdodCB3aWxsIGJlIGNhbGN1bGF0ZWQgZnJvbSBjZWxsIHdpZHRoLlxuICAgIGRkUGx1Z2luOiBib29sZWFuO1xuICAgIGRpc2FibGVEcmFnOiBib29sZWFuO1xuICAgIGRpc2FibGVSZXNpemU6IGJvb2xlYW47XG4gICAgZHJhZ2dhYmxlOiBib29sZWFuO1xuICAgIGhhbmRsZTogc3RyaW5nOyAvL2RlZmF1bHQ6ICcuZ3JpZC1zdGFjay1pdGVtLWNvbnRlbnQnXG4gICAgaGFuZGxlQ2xhc3M6IHN0cmluZzsgIC8vZHJhZ2dhYmxlIGhhbmRsZSBjbGFzcyAoZS5nLiAnZ3JpZC1zdGFjay1pdGVtLWNvbnRlbnQnKS4gSWYgc2V0IGhhbmRsZSBpcyBpZ25vcmVkIChkZWZhdWx0OiBudWxsKVxuICAgIGhlaWdodDogbnVtYmVyOyAvL21heGltdW0gcm93cyBhbW91bnQuIERlZmF1bHQgaXMgMCB3aGljaCBtZWFucyBubyBtYXhpbXVtIHJvd3NcbiAgICBmbG9hdDogYm9vbGVhbjsgLy8gZW5hYmxlIGZsb2F0aW5nIHdpZGdldHMgKGRlZmF1bHQ6IGZhbHNlKVxuICAgIGl0ZW1DbGFzczogc3RyaW5nOyAgLy93aWRnZXQgY2xhc3MgKGRlZmF1bHQ6ICdncmlkLXN0YWNrLWl0ZW0nKVxuICAgIG1pbldpZHRoOiBzdHJpbmc7IC8vbWluaW1hbCB3aWR0aC5JZiB3aW5kb3cgd2lkdGggaXMgbGVzcywgZ3JpZCB3aWxsIGJlIHNob3duIGluIG9uZSAtIGNvbHVtbiBtb2RlIChkZWZhdWx0OiA3NjgpXG4gICAgZGlzYWJsZU9uZUNvbHVtbk1vZGU6IGJvb2xlYW47IC8vZGlzYWJsZXMgdGhlIG9uQ29sdW1uTW9kZSB3aGVuIHRoZSB3aW5kb3cgd2lkdGggaXMgbGVzcyB0aGFuIG1pbldpZHRoIChkZWZhdWx0OiAnZmFsc2UnKVxuICAgIG9uZUNvbHVtbk1vZGVDbGFzczogc3RyaW5nOyAvL2NsYXNzIHNldCBvbiBncmlkIHdoZW4gaW4gb25lIGNvbHVtbiBtb2RlIChkZWZhdWx0OiAnZ3JpZC1zdGFjay1vbmUtY29sdW1uLW1vZGUnKVxuICAgIHBsYWNlaG9sZGVyQ2xhc3M6IHN0cmluZzsgLy9jbGFzcyBmb3IgcGxhY2Vob2xkZXIgKGRlZmF1bHQ6ICdncmlkLXN0YWNrLXBsYWNlaG9sZGVyJylcbiAgICBwbGFjZWhvbGRlclRleHQ6IHN0cmluZzsgLy9wbGFjZWhvbGRlciBkZWZhdWx0IGNvbnRlbnQgKGRlZmF1bHQ6ICcnKVxuICAgIHJlc2l6YWJsZTogYm9vbGVhbjsgLy9hbGxvd3MgdG8gb3ZlcnJpZGUgalF1ZXJ5IFVJIHJlc2l6YWJsZSBvcHRpb25zLiAoZGVmYXVsdDoge2F1dG9IaWRlOiB0cnVlLCBoYW5kbGVzOiAnc2UnfSlcbiAgICByZW1vdmFibGU6IGJvb2xlYW47IC8vaWYgdHJ1ZSB3aWRnZXRzIGNvdWxkIGJlIHJlbW92ZWQgYnkgZHJhZ2dpbmcgb3V0c2lkZSBvZiB0aGUgZ3JpZC4gSXQgY291bGQgYWxzbyBiZSBhIGpRdWVyeSBzZWxlY3RvciBzdHJpbmcsIGluIHRoaXMgY2FzZSB3aWRnZXRzIHdpbGwgYmUgcmVtb3ZlZCBieSBkcm9wcGluZyB0aGVtIHRoZXJlIChkZWZhdWx0OiBmYWxzZSlcbiAgICByZW1vdmVUaW1lb3V0OiBudW1iZXI7IC8vIHRpbWUgaW4gbWlsbGlzZWNvbmRzIGJlZm9yZSB3aWRnZXQgaXMgYmVpbmcgcmVtb3ZlZCB3aGlsZSBkcmFnZ2luZyBvdXRzaWRlIG9mIHRoZSBncmlkLiAoZGVmYXVsdDogMjAwMClcbiAgICBydGw6IHN0cmluZzsgLy9pZiB0cnVlIHR1cm5zIGdyaWQgdG8gUlRMLiBQb3NzaWJsZSB2YWx1ZXMgYXJlIHRydWUsIGZhbHNlLCAnYXV0bycgKGRlZmF1bHQ6ICdhdXRvJykgU2VlIGV4YW1wbGVcbiAgICBzdGF0aWNHcmlkOiBib29sZWFuOyAvL21ha2VzIGdyaWQgc3RhdGljIChkZWZhdWx0IGZhbHNlKS4gSWYgdHJ1ZSB3aWRnZXRzIGFyZSBub3QgbW92YWJsZS9yZXNpemFibGUuIFlvdSBkb24ndCBldmVuIG5lZWQgalF1ZXJ5VUkgZHJhZ2dhYmxlL3Jlc2l6YWJsZS4gQSBDU1MgY2xhc3MgZ3JpZC1zdGFjay1zdGF0aWMgaXMgYWxzbyBhZGRlZCB0byB0aGUgY29udGFpbmVyLlxuICAgIHZlcnRpY2FsTWFyZ2luOiBudW1iZXI7IC8vdmVydGljYWwgZ2FwIHNpemUgKGRlZmF1bHQ6IDIwKS4gQ2FuIGJlOiBhbiBpbnRlZ2VyIChweCkgYSBzdHJpbmcgKGV4OiAnMmVtJywgJzIwcHgnLCAnMnJlbScpXG4gICAgd2lkdGg6IG51bWJlcjsgLy9hbW91bnQgb2YgY29sdW1ucyAoZGVmYXVsdDogMTIpLiBTZXR0aW5nIG5vbi1kZWZhdWx0IHZhbHVlIG11c3QgYmUgc3VwcG9ydGVkIGJ5IGVxdWl2YWxlbnQgY2hhbmdlIGluIENTU1xufVxuIl19