/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import { Component, QueryList, Input, ContentChildren, ElementRef, Renderer } from '@angular/core';
import { GridStackOptions } from './../models/grid-stack-options.model';
import { GridStackItemComponent } from './../grid-stack-item/grid-stack-item.component';
export class GridStackComponent {
    /**
     * @param {?} el
     * @param {?} renderer
     */
    constructor(el, renderer) {
        this.el = el;
        this.renderer = renderer;
        this.options = new GridStackOptions();
        this.gridStack = null;
        this.grid = null;
        this.defaultOptions = {
            cellHeight: '60px',
            width: 12,
            height: 0,
            animate: true,
            float: false,
            resizable: true
        };
    }
    /**
     * @param {?} item
     * @return {?}
     */
    makeWidget(item) {
        item.jGridRef = this.grid;
        if (item.option != null && item.option.noResize != null && item.option.noResize) {
            return;
        }
        this.grid.resizable(item.nativeElement, true);
        this.grid.move(item.nativeElement, item.option.x, item.option.y);
        this.grid.resize(item.nativeElement, item.option.width, item.option.height);
    }
    /**
     * @param {?} item
     * @return {?}
     */
    updateWidget(item) {
        this.grid.resizable(item.nativeElement, true);
        this.grid.move(item.nativeElement, item.option.x, item.option.y);
        this.grid.resize(item.nativeElement, item.option.width, item.option.height);
    }
    /**
     * @param {?} item
     * @return {?}
     */
    AddWidget(item) {
        item.jGridRef = this.grid;
        if (item.option != null && item.option.noResize != null && item.option.noResize) {
            return;
        }
        this.grid.makeWidget(item.nativeElement);
        this.grid.resizable(item.nativeElement, true);
        this.grid.move(item.nativeElement, item.option.x, item.option.y);
        this.grid.resize(item.nativeElement, item.option.width, item.option.height);
    }
    /**
     * @param {?} item
     * @return {?}
     */
    RemoveWidget(item) {
        this.grid.removeWidget(item.nativeElement, false);
    }
    /**
     * @return {?}
     */
    ngAfterContentInit() {
        const /** @type {?} */ that = this;
        const /** @type {?} */ nativeElement = this.el.nativeElement;
        if (this.options == null) {
            this.options = new GridStackOptions();
        }
        for (const /** @type {?} */ key of Object.keys(this.defaultOptions)) {
            if (!this.options.hasOwnProperty(key)) {
                this.options = this.defaultOptions[key];
            }
        }
        this.renderer.setElementAttribute(nativeElement, 'data-gs-width', String(this.options.width));
        this.renderer.setElementAttribute(nativeElement, 'data-gs-height', String(this.options.height));
        this.gridStack = jQuery(nativeElement).gridstack(this.options);
        this.grid = this.gridStack.data('gridstack');
        this.gridStack.on('change', (e, items) => {
            _.each(items, (item) => this.widgetChanged(item));
        });
        // Initialize widgets
        this.items.forEach(item => that.makeWidget(item));
    }
    /**
     * @param {?} change
     * @return {?}
     */
    widgetChanged(change) {
        const /** @type {?} */ jWidget = change.el;
        const /** @type {?} */ gridStackItem = this.items.find(item => item.jWidgetRef !== null ? item.jWidgetRef === jWidget[0] : false);
        if (!gridStackItem) {
            return;
        }
        gridStackItem.update(change.x, change.y, change.width, change.height);
    }
}
GridStackComponent.decorators = [
    { type: Component, args: [{
                selector: 'ngx-grid-stack',
                template: `<ng-content></ng-content>
`,
                styles: [':host { display: block; }']
            },] },
];
/** @nocollapse */
GridStackComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: Renderer }
];
GridStackComponent.propDecorators = {
    options: [{ type: Input }],
    items: [{ type: ContentChildren, args: [GridStackItemComponent,] }]
};
function GridStackComponent_tsickle_Closure_declarations() {
    /** @type {?} */
    GridStackComponent.prototype.options;
    /** @type {?} */
    GridStackComponent.prototype.items;
    /** @type {?} */
    GridStackComponent.prototype.gridStack;
    /** @type {?} */
    GridStackComponent.prototype.grid;
    /** @type {?} */
    GridStackComponent.prototype.defaultOptions;
    /** @type {?} */
    GridStackComponent.prototype.el;
    /** @type {?} */
    GridStackComponent.prototype.renderer;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3JpZC1zdGFjay5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9uZ3gtZ3JpZC1zdGFjay8iLCJzb3VyY2VzIjpbImxpYi9ncmlkLXN0YWNrL2dyaWQtc3RhY2suY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLFNBQVMsRUFBRSxLQUFLLEVBQUUsZUFBZSxFQUFFLFVBQVUsRUFBRSxRQUFRLEVBQW9CLE1BQU0sZUFBZSxDQUFDO0FBQ3JILE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLHNDQUFzQyxDQUFDO0FBRXhFLE9BQU8sRUFBRSxzQkFBc0IsRUFBRSxNQUFNLGdEQUFnRCxDQUFDO0FBVXhGLE1BQU07Ozs7O0lBZUYsWUFBb0IsRUFBYyxFQUFVLFFBQWtCO1FBQTFDLE9BQUUsR0FBRixFQUFFLENBQVk7UUFBVSxhQUFRLEdBQVIsUUFBUSxDQUFVO3VCQWIzQixJQUFJLGdCQUFnQixFQUFFO3lCQUVoQyxJQUFJO29CQUNULElBQUk7OEJBQ0M7WUFDdkIsVUFBVSxFQUFFLE1BQU07WUFDbEIsS0FBSyxFQUFFLEVBQUU7WUFDVCxNQUFNLEVBQUUsQ0FBQztZQUNULE9BQU8sRUFBRSxJQUFJO1lBQ2IsS0FBSyxFQUFFLEtBQUs7WUFDWixTQUFTLEVBQUUsSUFBSTtTQUNoQjtLQUdBOzs7OztJQUVNLFVBQVUsQ0FBQyxJQUE0QjtRQUMxQyxJQUFJLENBQUMsUUFBUSxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUM7UUFDMUIsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLE1BQU0sSUFBSSxJQUFJLElBQUksSUFBSSxDQUFDLE1BQU0sQ0FBQyxRQUFRLElBQUksSUFBSSxJQUFJLElBQUksQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQztZQUNoRixNQUFNLENBQUM7U0FDUjtRQUVELElBQUksQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxhQUFhLEVBQUUs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YSxDQUFDLENBQUMsQ0FBQztZQUNuQixNQUFNLENBQUM7U0FDUjtRQUVELGFBQWEsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUMsRUFBRSxNQUFNLENBQUMsQ0FBQyxFQUFFLE1BQU0sQ0FBQyxLQUFLLEVBQUUsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDOzs7O1lBMUY3RSxTQUFTLFNBQUM7Z0JBQ1QsUUFBUSxFQUFFLGdCQUFnQjtnQkFDMUIsUUFBUSxFQUFFO0NBQ1g7Z0JBQ0MsTUFBTSxFQUFFLENBQUMsMkJBQTJCLENBQUM7YUFDdEM7Ozs7WUFac0QsVUFBVTtZQUFFLFFBQVE7OztzQkFleEUsS0FBSztvQkFDSCxlQUFlLFNBQUMsc0JBQXNCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29tcG9uZW50LCBRdWVyeUxpc3QsIElucHV0LCBDb250ZW50Q2hpbGRyZW4sIEVsZW1lbnRSZWYsIFJlbmRlcmVyLCBBZnRlckNvbnRlbnRJbml0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBHcmlkU3RhY2tPcHRpb25zIH0gZnJvbSAnLi8uLi9tb2RlbHMvZ3JpZC1zdGFjay1vcHRpb25zLm1vZGVsJztcbmltcG9ydCB7IEdyaWRTdGFja0l0ZW0gfSBmcm9tICcuLy4uL21vZGVscy9ncmlkLXN0YWNrLWl0ZW0ubW9kZWwnO1xuaW1wb3J0IHsgR3JpZFN0YWNrSXRlbUNvbXBvbmVudCB9IGZyb20gJy4vLi4vZ3JpZC1zdGFjay1pdGVtL2dyaWQtc3RhY2staXRlbS5jb21wb25lbnQnO1xuXG5kZWNsYXJlIHZhciBqUXVlcnk6IGFueTtcbmRlY2xhcmUgdmFyIF86IGFueTtcbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ25neC1ncmlkLXN0YWNrJyxcbiAgdGVtcGxhdGU6IGA8bmctY29udGVudD48L25nLWNvbnRlbnQ+XG5gLFxuICBzdHlsZXM6IFsnOmhvc3QgeyBkaXNwbGF5OiBibG9jazsgfSddXG59KVxuZXhwb3J0IGNsYXNzIEdyaWRTdGFja0NvbXBvbmVudCBpbXBsZW1lbnRzIEFmdGVyQ29udGVudEluaXQge1xuXG4gIEBJbnB1dCgpIG9wdGlvbnM6IEdyaWRTdGFja09wdGlvbnMgPSBuZXcgR3JpZFN0YWNrT3B0aW9ucygpO1xuICAgIEBDb250ZW50Q2hpbGRyZW4oR3JpZFN0YWNrSXRlbUNvbXBvbmVudCkgaXRlbXM6IFF1ZXJ5TGlzdDxHcmlkU3RhY2tJdGVtQ29tcG9uZW50PjtcbiAgICBwcml2YXRlIGdyaWRTdGFjazogYW55ID0gbnVsbDtcbiAgICBwcml2YXRlIGdyaWQ6IGFueSA9IG51bGw7XG4gICAgcHJpdmF0ZSBkZWZhdWx0T3B0aW9ucyA9IHtcbiAgICAgIGNlbGxIZWlnaHQ6ICc2MHB4JyxcbiAgICAgIHdpZHRoOiAxMixcbiAgICAgIGhlaWdodDogMCxcbiAgICAgIGFuaW1hdGU6IHRydWUsXG4gICAgICBmbG9hdDogZmFsc2UsXG4gICAgICByZXNpemFibGU6IHRydWVcbiAgICB9O1xuXG4gICAgY29uc3RydWN0b3IocHJpdmF0ZSBlbDogRWxlbWVudFJlZiwgcHJpdmF0ZSByZW5kZXJlcjogUmVuZGVyZXIpIHtcbiAgICB9XG5cbiAgICBwdWJsaWMgbWFrZVdpZGdldChpdGVtOiBHcmlkU3RhY2tJdGVtQ29tcG9uZW50KSB7XG4gICAgICAgIGl0ZW0uakdyaWRSZWYgPSB0aGlzLmdyaWQ7XG4gICAgICAgIGlmIChpdGVtLm9wdGlvbiAhPSBudWxsICYmIGl0ZW0ub3B0aW9uLm5vUmVzaXplICE9IG51bGwgJiYgaXRlbS5vcHRpb24ubm9SZXNpemUpIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLmdyaWQucmVzaXphYmxlKGl0ZW0ubmF0aXZlRWxlbWVudCwgdHJ1ZSk7XG4gICAgICAgIHRoaXMuZ3JpZC5tb3ZlKGl0ZW0ubmF0aXZlRWxlbWVudCwgaXRlbS5vcHRpb24ueCwgaXRlbS5vcHRpb24ueSk7XG4gICAgICAgIHRoaXMuZ3JpZC5yZXNpemUoaXRlbS5uYXRpdmVFbGVtZW50LCBpdGVtLm9wdGlvbi53aWR0aCwgaXRlbS5vcHRpb24uaGVpZ2h0KTtcbiAgICB9XG5cbiAgICBwdWJsaWMgdXBkYXRlV2lkZ2V0KGl0ZW06IEdyaWRTdGFja0l0ZW1Db21wb25lbnQpIHtcbiAgICAgICAgdGhpcy5ncmlkLnJlc2l6YWJsZShpdGVtLm5hdGl2ZUVsZW1lbnQsIHRydWUpO1xuICAgICAgICB0aGlzLmdyaWQubW92ZShpdGVtLm5hdGl2ZUVsZW1lbnQsIGl0ZW0ub3B0aW9uLngsIGl0ZW0ub3B0aW9uLnkpO1xuICAgICAgICB0aGlzLmdyaWQucmVzaXplKGl0ZW0ubmF0aXZlRWxlbWVudCwgaXRlbS5vcHRpb24ud2lkdGgsIGl0ZW0ub3B0aW9uLmhlaWdodCk7XG4gICAgfVxuXG4gICAgcHVibGljIEFkZFdpZGdldChpdGVtOiBHcmlkU3RhY2tJdGVtQ29tcG9uZW50KSB7XG4gICAgICAgIGl0ZW0uakdyaWRSZWYgPSB0aGlzLmdyaWQ7XG4gICAgICAgIGlmIChpdGVtLm9wdGlvbiAhPSBudWxsICYmIGl0ZW0ub3B0aW9uLm5vUmVzaXplICE9IG51bGwgJiYgaXRlbS5vcHRpb24ubm9SZXNpemUpIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5ncmlkLm1ha2VXaWRnZXQoaXRlbS5uYXRpdmVFbGVtZW50KTtcbiAgICAgICAgdGhpcy5ncmlkLnJlc2l6YWJsZShpdGVtLm5hdGl2ZUVsZW1lbnQsIHRydWUpO1xuICAgICAgICB0aGlzLmdyaWQubW92ZShpdGVtLm5hdGl2ZUVsZW1lbnQsIGl0ZW0ub3B0aW9uLngsIGl0ZW0ub3B0aW9uLnkpO1xuICAgICAgICB0aGlzLmdyaWQucmVzaXplKGl0ZW0ubmF0aXZlRWxlbWVudCwgaXRlbS5vcHRpb24ud2lkdGgsIGl0ZW0ub3B0aW9uLmhlaWdodCk7XG4gICAgfVxuXG4gICAgcHVibGljIFJlbW92ZVdpZGdldChpdGVtOiBHcmlkU3RhY2tJdGVtQ29tcG9uZW50KSB7XG4gICAgICAgIHRoaXMuZ3JpZC5yZW1vdmVXaWRnZXQoaXRlbS5uYXRpdmVFbGVtZW50LCBmYWxzZSk7XG4gICAgfVxuXG4gICAgbmdBZnRlckNvbnRlbnRJbml0KCk6IHZvaWQge1xuICAgICAgICBjb25zdCB0aGF0ID0gdGhpcztcbiAgICAgICAgY29uc3QgbmF0aXZlRWxlbWVudCA9IHRoaXMuZWwubmF0aXZlRWxlbWVudDtcbiAgICAgICAgaWYgKHRoaXMub3B0aW9ucyA9PSBudWxsKSB7XG4gICAgICAgICAgdGhpcy5vcHRpb25zID0gbmV3IEdyaWRTdGFja09wdGlvbnMoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGZvciAoY29uc3Qga2V5IG9mIE9iamVjdC5rZXlzKHRoaXMuZGVmYXVsdE9wdGlvbnMpKSB7XG4gICAgICAgICAgaWYgKCF0aGlzLm9wdGlvbnMuaGFzT3duUHJvcGVydHkoa2V5KSkge1xuICAgICAgICAgICAgdGhpcy5vcHRpb25zID0gdGhpcy5kZWZhdWx0T3B0aW9uc1trZXldO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMucmVuZGVyZXIuc2V0RWxlbWVudEF0dHJpYnV0ZShuYXRpdmVFbGVtZW50LCAnZGF0YS1ncy13aWR0aCcsIFN0cmluZyh0aGlzLm9wdGlvbnMud2lkdGgpKTtcbiAgICAgICAgdGhpcy5yZW5kZXJlci5zZXRFbGVtZW50QXR0cmlidXRlKG5hdGl2ZUVsZW1lbnQsICdkYXRhLWdzLWhlaWdodCcsIFN0cmluZyh0aGlzLm9wdGlvbnMuaGVpZ2h0KSk7XG5cbiAgICAgICAgdGhpcy5ncmlkU3RhY2sgPSBqUXVlcnkobmF0aXZlRWxlbWVudCkuZ3JpZHN0YWNrKHRoaXMub3B0aW9ucyk7XG4gICAgICAgIHRoaXMuZ3JpZCA9IHRoaXMuZ3JpZFN0YWNrLmRhdGEoJ2dyaWRzdGFjaycpO1xuXG4gICAgICAgIHRoaXMuZ3JpZFN0YWNrLm9uKCdjaGFuZ2UnLCAoZTogYW55LCBpdGVtczogYW55KSA9PiB7XG4gICAgICAgICAgICBfLmVhY2goaXRlbXMsIChpdGVtOiBhbnkpID0+IHRoaXMud2lkZ2V0Q2hhbmdlZChpdGVtKSk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIC8vIEluaXRpYWxpemUgd2lkZ2V0c1xuICAgICAgICB0aGlzLml0ZW1zLmZvckVhY2goaXRlbSA9PiB0aGF0Lm1ha2VXaWRnZXQoaXRlbSkpO1xuICAgIH1cblxuICAgIHByaXZhdGUgd2lkZ2V0Q2hhbmdlZChjaGFuZ2U6IEdyaWRTdGFja0l0ZW0pOiB2b2lkIHtcbiAgICAgICAgY29uc3QgaldpZGdldCA9IGNoYW5nZS5lbDtcbiAgICAgICAgY29uc3QgZ3JpZFN0YWNrSXRlbSA9IHRoaXMuaXRlbXMuZmluZChpdGVtID0+IGl0ZW0ualdpZGdldFJlZiAhPT0gbnVsbCA/IGl0ZW0ualdpZGdldFJlZiA9PT0galdpZGdldFswXSA6IGZhbHNlKTtcbiAgICAgICAgaWYgKCFncmlkU3RhY2tJdGVtKSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgZ3JpZFN0YWNrSXRlbS51cGRhdGUoY2hhbmdlLngsIGNoYW5nZS55LCBjaGFuZ2Uud2lkdGgsIGNoYW5nZS5oZWlnaHQpO1xuICAgIH1cblxufVxuIl19