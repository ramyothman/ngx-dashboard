(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@angular/common')) :
    typeof define === 'function' && define.amd ? define('ngx-grid-stack', ['exports', '@angular/core', '@angular/common'], factory) :
    (factory((global['ngx-grid-stack'] = {}),global.ng.core,global.ng.common));
}(this, (function (exports,core,common) { 'use strict';

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var GridStackItem = (function () {
        function GridStackItem() {
            this.x = 0;
            this.y = 0;
            this.height = 1;
            this.width = 1;
            this.noResize = false;
            this.autoPosition = false;
            this.marginWidth = '10px';
        }
        /**
         * @param {?} widget
         * @return {?}
         */
        GridStackItem.Clone = /**
         * @param {?} widget
         * @return {?}
         */
            function (widget) {
                var /** @type {?} */ result = new GridStackItem();
                result.autoPosition = widget.autoPosition;
                result.customId = widget.customId;
                result.el = widget.el;
                result.height = widget.height;
                result.locked = widget.locked;
                result.maxHeight = widget.maxHeight;
                result.maxWidth = widget.maxWidth;
                result.minHeight = widget.minHeight;
                result.minWidth = widget.minWidth;
                result.noMove = widget.noMove;
                result.noResize = widget.noResize;
                result.width = widget.width;
                result.x = widget.x;
                result.y = widget.y;
                return result;
            };
        return GridStackItem;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var GridStackOptions = (function () {
        function GridStackOptions() {
        }
        return GridStackOptions;
    }());

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation. All rights reserved.
    Licensed under the Apache License, Version 2.0 (the "License"); you may not use
    this file except in compliance with the License. You may obtain a copy of the
    License at http://www.apache.org/licenses/LICENSE-2.0

    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
    MERCHANTABLITY OR NON-INFRINGEMENT.

    See the Apache Version 2.0 License for specific language governing permissions
    and limitations under the License.
    ***************************************************************************** */
    function __values(o) {
        var m = typeof Symbol === "function" && o[Symbol.iterator], i = 0;
        if (m)
            return m.call(o);
        return {
            next: function () {
                if (o && i >= o.length)
                    o = void 0;
                return { value: o && o[i++], done: !o };
            }
        };
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var GridStackItemComponent = (function () {
        function GridStackItemComponent(el, renderer) {
            this.el = el;
            this.renderer = renderer;
            this.GridConfigurationChanged = new core.EventEmitter();
            this.contentComponentRef = null;
            this.jGridRef = null;
            this.jWidgetRef = null;
            this.jWidgetRef = el.nativeElement;
        }
        Object.defineProperty(GridStackItemComponent.prototype, "nativeElement", {
            get: /**
             * @return {?}
             */ function () {
                return this.el.nativeElement;
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @return {?}
         */
        GridStackItemComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                this.RenderWidget(null);
            };
        /**
         * @param {?} item
         * @return {?}
         */
        GridStackItemComponent.prototype.UpdateWidget = /**
         * @param {?} item
         * @return {?}
         */
            function (item) {
            };
        /**
         * @param {?} item
         * @return {?}
         */
        GridStackItemComponent.prototype.RenderWidget = /**
         * @param {?} item
         * @return {?}
         */
            function (item) {
                var /** @type {?} */ renderer = this.renderer;
                if (item != null) {
                    this.option = item;
                }
                this.renderer.setElementAttribute(this.nativeElement, 'style', 'margin-left:' + this.option.marginWidth + ';');
                this.renderer.setElementAttribute(this.nativeElement, 'data-gs-x', String(this.option.x));
                this.renderer.setElementAttribute(this.nativeElement, 'data-gs-y', String(this.option.y));
                this.renderer.setElementAttribute(this.nativeElement, 'data-gs-width', String(this.option.width));
                this.renderer.setElementAttribute(this.nativeElement, 'data-gs-height', String(this.option.height));
                if (this.option.minWidth) {
                    renderer.setElementAttribute(this.nativeElement, 'data-gs-min-width', String(this.option.minWidth));
                }
                if (this.option.noResize != null && this.option.noResize === true) {
                    renderer.setElementAttribute(this.nativeElement, 'data-gs-no-resize', 'yes');
                }
            };
        /**
         * @param {?} x
         * @param {?} y
         * @param {?} width
         * @param {?} height
         * @return {?}
         */
        GridStackItemComponent.prototype.update = /**
         * @param {?} x
         * @param {?} y
         * @param {?} width
         * @param {?} height
         * @return {?}
         */
            function (x, y, width, height) {
                // console.log('here');
                if (x === this.option.x && y === this.option.y && width === this.option.width && height === this.option.height) {
                    return;
                }
                if (this.option != null) {
                    this.option.x = x;
                    this.option.y = y;
                    this.option.width = width;
                    this.option.height = height;
                    var /** @type {?} */ optionNew = GridStackItem.Clone(this.option);
                    this.GridConfigurationChanged.emit(optionNew);
                }
            };
        /**
         * @return {?}
         */
        GridStackItemComponent.prototype.ngAfterViewInit = /**
         * @return {?}
         */
            function () {
            };
        /**
         * @return {?}
         */
        GridStackItemComponent.prototype.ngOnDestroy = /**
         * @return {?}
         */
            function () {
                if (this.contentComponentRef !== null) {
                    this.contentComponentRef.destroy();
                }
            };
        GridStackItemComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'ngx-grid-stack-item',
                        template: "<div class=\"grid-stack-item-content\">\n  <div #contentPlaceholder *ngIf=\"contentTemplate\"></div>\n  <ng-content *ngIf=\"!contentTemplate\"></ng-content>\n</div>\n",
                        styles: [""]
                    },] },
        ];
        /** @nocollapse */
        GridStackItemComponent.ctorParameters = function () {
            return [
                { type: core.ElementRef },
                { type: core.Renderer }
            ];
        };
        GridStackItemComponent.propDecorators = {
            contentPlaceholder: [{ type: core.ViewChild, args: ['contentPlaceholder', { read: core.ViewContainerRef },] }],
            contentTemplate: [{ type: core.Input }],
            option: [{ type: core.Input }],
            GridConfigurationChanged: [{ type: core.Output }]
        };
        return GridStackItemComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var GridStackComponent = (function () {
        function GridStackComponent(el, renderer) {
            this.el = el;
            this.renderer = renderer;
            this.options = new GridStackOptions();
            this.gridStack = null;
            this.grid = null;
            this.defaultOptions = {
                cellHeight: '60px',
                width: 12,
                height: 0,
                animate: true,
                float: false,
                resizable: true
            };
        }
        /**
         * @param {?} item
         * @return {?}
         */
        GridStackComponent.prototype.makeWidget = /**
         * @param {?} item
         * @return {?}
         */
            function (item) {
                item.jGridRef = this.grid;
                if (item.option != null && item.option.noResize != null && item.option.noResize) {
                    return;
                }
                this.grid.resizable(item.nativeElement, true);
                this.grid.move(item.nativeElement, item.option.x, item.option.y);
                this.grid.resize(item.nativeElement, item.option.width, item.option.height);
            };
        /**
         * @param {?} item
         * @return {?}
         */
        GridStackComponent.prototype.updateWidget = /**
         * @param {?} item
         * @return {?}
         */
            function (item) {
                this.grid.resizable(item.nativeElement, true);
                this.grid.move(item.nativeElement, item.option.x, item.option.y);
                this.grid.resize(item.nativeElement, item.option.width, item.option.height);
            };
        /**
         * @param {?} item
         * @return {?}
         */
        GridStackComponent.prototype.AddWidget = /**
         * @param {?} item
         * @return {?}
         */
            function (item) {
                item.jGridRef = this.grid;
                if (item.option != null && item.option.noResize != null && item.option.noResize) {
                    return;
                }
                this.grid.makeWidget(item.nativeElement);
                this.grid.resizable(item.nativeElement, true);
                this.grid.move(item.nativeElement, item.option.x, item.option.y);
                this.grid.resize(item.nativeElement, item.option.width, item.option.height);
            };
        /**
         * @param {?} item
         * @return {?}
         */
        GridStackComponent.prototype.RemoveWidget = /**
         * @param {?} item
         * @return {?}
         */
            function (item) {
                this.grid.removeWidget(item.nativeElement, false);
            };
        /**
         * @return {?}
         */
        GridStackComponent.prototype.ngAfterContentInit = /**
         * @return {?}
         */
            function () {
                var _this = this;
                var /** @type {?} */ that = this;
                var /** @type {?} */ nativeElement = this.el.nativeElement;
                if (this.options == null) {
                    this.options = new GridStackOptions();
                }
                try {
                    for (var _a = __values(Object.keys(this.defaultOptions)), _b = _a.next(); !_b.done; _b = _a.next()) {
                        var key = _b.value;
                        if (!this.options.hasOwnProperty(key)) {
                            this.options = this.defaultOptions[key];
                        }
                    }
                }
                catch (e_1_1) {
                    e_1 = { error: e_1_1 };
                }
                finally {
                    try {
                        if (_b && !_b.done && (_c = _a.return))
                            _c.call(_a);
                    }
                    finally {
                        if (e_1)
                            throw e_1.error;
                    }
                }
                this.renderer.setElementAttribute(nativeElement, 'data-gs-width', String(this.options.width));
                this.renderer.setElementAttribute(nativeElement, 'data-gs-height', String(this.options.height));
                this.gridStack = jQuery(nativeElement).gridstack(this.options);
                this.grid = this.gridStack.data('gridstack');
                this.gridStack.on('change', function (e, items) {
                    _.each(items, function (item) { return _this.widgetChanged(item); });
                });
                // Initialize widgets
                this.items.forEach(function (item) { return that.makeWidget(item); });
                var e_1, _c;
            };
        /**
         * @param {?} change
         * @return {?}
         */
        GridStackComponent.prototype.widgetChanged = /**
         * @param {?} change
         * @return {?}
         */
            function (change) {
                var /** @type {?} */ jWidget = change.el;
                var /** @type {?} */ gridStackItem = this.items.find(function (item) { return item.jWidgetRef !== null ? item.jWidgetRef === jWidget[0] : false; });
                if (!gridStackItem) {
                    return;
                }
                gridStackItem.update(change.x, change.y, change.width, change.height);
            };
        GridStackComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'ngx-grid-stack',
                        template: "<ng-content></ng-content>\n",
                        styles: [':host { display: block; }']
                    },] },
        ];
        /** @nocollapse */
        GridStackComponent.ctorParameters = function () {
            return [
                { type: core.ElementRef },
                { type: core.Renderer }
            ];
        };
        GridStackComponent.propDecorators = {
            options: [{ type: core.Input }],
            items: [{ type: core.ContentChildren, args: [GridStackItemComponent,] }]
        };
        return GridStackComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var GridStackModule = (function () {
        function GridStackModule() {
        }
        GridStackModule.decorators = [
            { type: core.NgModule, args: [{
                        imports: [
                            common.CommonModule
                        ],
                        declarations: [GridStackComponent, GridStackItemComponent],
                        exports: [GridStackComponent, GridStackItemComponent]
                    },] },
        ];
        return GridStackModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */

    exports.GridStackItem = GridStackItem;
    exports.GridStackOptions = GridStackOptions;
    exports.GridStackComponent = GridStackComponent;
    exports.GridStackItemComponent = GridStackItemComponent;
    exports.GridStackModule = GridStackModule;

    Object.defineProperty(exports, '__esModule', { value: true });

})));

//# sourceMappingURL=data:application/json;charset=utf-8;base64,