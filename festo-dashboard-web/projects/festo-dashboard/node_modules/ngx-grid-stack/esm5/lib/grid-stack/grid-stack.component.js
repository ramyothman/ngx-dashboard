/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Component, QueryList, Input, ContentChildren, ElementRef, Renderer } from '@angular/core';
import { GridStackOptions } from './../models/grid-stack-options.model';
import { GridStackItemComponent } from './../grid-stack-item/grid-stack-item.component';
var GridStackComponent = /** @class */ (function () {
    function GridStackComponent(el, renderer) {
        this.el = el;
        this.renderer = renderer;
        this.options = new GridStackOptions();
        this.gridStack = null;
        this.grid = null;
        this.defaultOptions = {
            cellHeight: '60px',
            width: 12,
            height: 0,
            animate: true,
            float: false,
            resizable: true
        };
    }
    /**
     * @param {?} item
     * @return {?}
     */
    GridStackComponent.prototype.makeWidget = /**
     * @param {?} item
     * @return {?}
     */
    function (item) {
        item.jGridRef = this.grid;
        if (item.option != null && item.option.noResize != null && item.option.noResize) {
            return;
        }
        this.grid.resizable(item.nativeElement, true);
        this.grid.move(item.nativeElement, item.option.x, item.option.y);
        this.grid.resize(item.nativeElement, item.option.width, item.option.height);
    };
    /**
     * @param {?} item
     * @return {?}
     */
    GridStackComponent.prototype.updateWidget = /**
     * @param {?} item
     * @return {?}
     */
    function (item) {
        this.grid.resizable(item.nativeElement, true);
        this.grid.move(item.nativeElement, item.option.x, item.option.y);
        this.grid.resize(item.nativeElement, item.option.width, item.option.height);
    };
    /**
     * @param {?} item
     * @return {?}
     */
    GridStackComponent.prototype.AddWidget = /**
     * @param {?} item
     * @return {?}
     */
    function (item) {
        item.jGridRef = this.grid;
        if (item.option != null && item.option.noResize != null && item.option.noResize) {
            return;
        }
        this.grid.makeWidget(item.nativeElement);
        this.grid.resizable(item.nativeElement, true);
        this.grid.move(item.nativeElement, item.option.x, item.option.y);
        this.grid.resize(item.nativeElement, item.option.width, item.option.height);
    };
    /**
     * @param {?} item
     * @return {?}
     */
    GridStackComponent.prototype.RemoveWidget = /**
     * @param {?} item
     * @return {?}
     */
    function (item) {
        this.grid.removeWidget(item.nativeElement, false);
    };
    /**
     * @return {?}
     */
    GridStackComponent.prototype.ngAfterContentInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        var /** @type {?} */ that = this;
        var /** @type {?} */ nativeElement = this.el.nativeElement;
        if (this.options == null) {
            this.options = new GridStackOptions();
        }
        try {
            for (var _a = tslib_1.__values(Object.keys(this.defaultOptions)), _b = _a.next(); !_b.done; _b = _a.next()) {
                var key = _b.value;
                if (!this.options.hasOwnProperty(key)) {
                    this.options = this.defaultOptions[key];
                }
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (_b && !_b.done && (_c = _a.return)) _c.call(_a);
            }
            finally { if (e_1) throw e_1.error; }
        }
        this.renderer.setElementAttribute(nativeElement, 'data-gs-width', String(this.options.width));
        this.renderer.setElementAttribute(nativeElement, 'data-gs-height', String(this.options.height));
        this.gridStack = jQuery(nativeElement).gridstack(this.options);
        this.grid = this.gridStack.data('gridstack');
        this.gridStack.on('change', function (e, items) {
            _.each(items, function (item) { return _this.widgetChanged(item); });
        });
        // Initialize widgets
        this.items.forEach(function (item) { return that.makeWidget(item); });
        var e_1, _c;
    };
    /**
     * @param {?} change
     * @return {?}
     */
    GridStackComponent.prototype.widgetChanged = /**
     * @param {?} change
     * @return {?}
     */
    function (change) {
        var /** @type {?} */ jWidget = change.el;
        var /** @type {?} */ gridStackItem = this.items.find(function (item) { return item.jWidgetRef !== null ? item.jWidgetRef === jWidget[0] : false; });
        if (!gridStackItem) {
            return;
        }
        gridStackItem.update(change.x, change.y, change.width, change.height);
    };
    GridStackComponent.decorators = [
        { type: Component, args: [{
                    selector: 'ngx-grid-stack',
                    template: "<ng-content></ng-content>\n",
                    styles: [':host { display: block; }']
                },] },
    ];
    /** @nocollapse */
    GridStackComponent.ctorParameters = function () { return [
        { type: ElementRef },
        { type: Renderer }
    ]; };
    GridStackComponent.propDecorators = {
        options: [{ type: Input }],
        items: [{ type: ContentChildren, args: [GridStackItemComponent,] }]
    };
    return GridStackComponent;
}());
export { GridStackComponent };
function GridStackComponent_tsickle_Closure_declarations() {
    /** @type {?} */
    GridStackComponent.prototype.options;
    /** @type {?} */
    GridStackComponent.prototype.items;
    /** @type {?} */
    GridStackComponent.prototype.gridStack;
    /** @type {?} */
    GridStackComponent.prototype.grid;
    /** @type {?} */
    GridStackComponent.prototype.defaultOptions;
    /** @type {?} */
    GridStackComponent.prototype.el;
    /** @type {?} */
    GridStackComponent.prototype.renderer;
}

//# sourceMappingURL=data:application/json;base64,